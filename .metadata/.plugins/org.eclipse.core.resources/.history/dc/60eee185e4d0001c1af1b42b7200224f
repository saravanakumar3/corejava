package com.syschain.relectionsactor;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.util.Scanner;
public class ListClassMember {
	public static void earlyBinding() {
		Actor actorReference=new Actor();
		actorReference.Name="Sk";
		actorReference.City="Chennai";
		actorReference.printCity();
		actorReference.printName();
	}
	public static void lateBinding() {
		java.util.Scanner sc = new Scanner(System.in);
		try {			
			System.out.println("Enter Class Name");
			String className = sc.nextLine();
			// load the class -- A a1;
			Class<?> classReference = Class.forName(className);
			// create Object a1=new A();
			Object obj = classReference.getDeclaredConstructor().newInstance();			
			System.out.println("Class Name " + obj.getClass().getName());
			System.out.println("Hash Code " + obj.hashCode());
		}catch (Exception e) {
			System.out.println("Exception: " + e);
		}
		finally
		{
			sc.close();
		}
	}
	public static void main(String args[])
	  {
		/* String classname="com.chainsys.relectionsactor";
		 Class<?> actorclass = null;
		 try {
			actorclass=Class.forName(classname); // Actor actorclass=null;
		 } catch (ClassNotFoundException e1) 
		 {
			e1.printStackTrace();
		 } 
		 Object obj = null;
		 try {
			//obj=actorclass.newInstance(); // new Actor();
				obj = actorclass.getDeclaredConstructors()[0].newInstance();
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} 
		 catch (InvocationTargetException e) {
				e.printStackTrace();
			} catch (SecurityException e) {
				e.printStackTrace();
			}catch (InstantiationException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}
		 printClassInfo(obj);
	  }

	private static void printClassInfo(Object ob) {
		// TODO Auto-generated method stub
		  Class<?> classreflected= ob.getClass();
			 System.out.println(classreflected.getName());
			 System.out.println("Constructors:");
		     Constructor<?> constructorlist[] = classreflected.getConstructors();
		     for(int i = 0; i < constructorlist.length; i++)
		     {
		       System.out.println("\t" + constructorlist[i]);
		     }
		     //
		     System.out.println("Methods:");
		     Method methodlist[] = classreflected.getMethods();

		for(int i1 = 0; i1 < methodlist.length; i1++)
		     {
		   	  methodlist[i1].setAccessible(true);
		       System.out.println("\t Method Name: " + methodlist[i1].getName()+
		       		" ParameterCount "+ methodlist[i1].getParameterCount()+
		       		" returnType "+ methodlist[i1].getReturnType());
		     }
	}

*/
		  lateBinding();	}}